#include <iostream>
#include <vector>
#include <string>
#include <queue>

using namespace std;

// Struct to represent a space mission
struct Mission {
    string name;
    int priority; // Priority value: higher = more critical
    int deadline; // Lower deadline value = closer to launch
    int importance; // Scientific importance value

    // Custom comparator for max-heap (higher priority comes first)
    bool operator<(const Mission &other) const {
        return priority < other.priority;
    }
};

// Function to display the heap
void displayHeap(priority_queue<Mission> heap) {
    cout << "Current Missions in Priority Order:\n";
    while (!heap.empty()) {
        Mission top = heap.top();
        cout << "Mission: " << top.name
             << ", Priority: " << top.priority
             << ", Deadline: " << top.deadline
             << ", Importance: " << top.importance << endl;
        heap.pop();
    }
    cout << "------------------------\n";
}

// Task 1: Insert a new mission into the heap
void addMission(priority_queue<Mission> &heap, const string &name, int priority, int deadline, int importance) {
    Mission newMission = {name, priority, deadline, importance};
    heap.push(newMission);
    cout << "Added mission: " << name << " with priority " << priority << endl;
}

// Task 2: Remove the most critical mission
void removeTopMission(priority_queue<Mission> &heap) {
    if (heap.empty()) {
        cout << "No missions to remove!\n";
        return;
    }
    Mission top = heap.top();
    cout << "Removing mission: " << top.name << " with priority " << top.priority << endl;
    heap.pop();
}

// Task 3: Simulate mission rescheduling (update priorities)
void rescheduleMission(priority_queue<Mission> &heap, const string &name, int newPriority) {
    vector<Mission> temp;
    bool found = false;

    // Extract all missions, find the one to update
    while (!heap.empty()) {
        Mission current = heap.top();
        heap.pop();
        if (current.name == name) {
            current.priority = newPriority;
            found = true;
        }
        temp.push_back(current);
    }

    // Restore the heap with updated priorities
    for (const Mission &m : temp) {
        heap.push(m);
    }

    if (found) {
        cout << "Rescheduled mission: " << name << " with new priority " << newPriority << endl;
    } else {
        cout << "Mission not found: " << name << endl;
    }
}

// Main function to demonstrate the tasks
int main() {
    priority_queue<Mission> missionHeap;

    cout << "=== Space Exploration Mission Control ===\n";

    // Sample operations
    addMission(missionHeap, "Mars Rover", 90, 5, 80);
    addMission(missionHeap, "Lunar Base", 70, 10, 85);
    addMission(missionHeap, "Asteroid Mining", 85, 7, 95);
    displayHeap(missionHeap);

    removeTopMission(missionHeap);
    displayHeap(missionHeap);

    rescheduleMission(missionHeap, "Lunar Base", 95);
    displayHeap(missionHeap);

    return 0;
}
